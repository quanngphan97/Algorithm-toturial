#include <bits/stdc++.h>
using namespace std;
#define MAX 100 + 10

int testcase;
int edge;
int graph[MAX][MAX];

void inputData()
{
	cin >> edge;
	cin >> testcase;
	for(int i  = 0 ; i < testcase; i++)
	{
		int start,end,value;
		cin >> start >> end >> value;
		graph[start][end] = graph[end][start] = value;
	}
}

int minDistance(vector<int> &dist,vector<bool> &visited) {
	int min = INT_MAX;
	int position = INT_MIN;
	for(int i = 1; i <= edge; i++)
	{
		if(!visited[i] && dist[i] < min) 
		{
			min = dist[i];
			position = i;
		}
	}
	return position;
}
int greedy(int start)
{
	vector<bool> visited(edge + 1);
	vector<int> dist(edge + 1);
	for(int i = 1; i <= edge; i++)
	{
		visited[i] = false;
		dist[i] = INT_MAX;
	}
	
	dist[start] = 0;
	
	for(int v = 1; v <= edge; v++) {
		int u = minDistance(dist,visited);
		visited[u] = true;
		for(int i = 1; i <= edge; i++)
		{
			if(!visited[i] && dist[i] >= dist[u] + graph[u][i] && graph[u][i] != 0 && dist[u] != INT_MAX) {
				dist[i] = dist[u] + graph[u][i];
			}
		}
	}
	
	int ans = INT_MIN;;
	for(int i = 1; i <= edge; i++)
	{
		if(ans < dist[i]) ans = dist[i];
	}
	return ans;
}
int main() {
	inputData();
	int ans = INT_MAX; 
	for(int i = 1; i <= edge; i++) 
	{	
		int temp = greedy(i);
		if(ans > temp) ans = temp;
	}
	cout << ans << endl;
}
